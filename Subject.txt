Ft_services познакомит вас с Kubernetes. Вы откроете для себя управление кластерами и развертывание с помощью Kubernetes. Вы виртуализируете сеть и выполняете "кластеризацию".

• Вы должны поместить все необходимые файлы для настройки вашего сервера в папку под названием srcs.
• Ваш setup.sh файл должен находиться в корне вашего репозитория. Этот скрипт настроит
все ваши приложения.
• Этот предмет требует как старых, так и новых практик. Поэтому мы советуем вам не
бояться читать много документации о Docker, Kubernetes и всех других полезных для проекта вещах.

Проект состоит из создания инфраструктуры различных сервисов. Для этого
необходимо использовать Kubernetes. Вам нужно будет создать кластер с несколькими службами.
Каждая служба должна будет работать в выделенном контейнере.
Каждый контейнер должен иметь то же имя, что и соответствующая служба, и по
соображениям производительности контейнеры должны быть построены с использованием Alpine Linux.
Кроме того, им нужно будет иметь написанный вами файл Dockerfile, который вызывается в setup.sh.
Вам придется самому создавать образы, которые вы будете использовать. Запрещено принимать
уже созданные образы или использовать такие сервисы, как DockerHub.
Вам также придется настроить:
• Веб-панель мониторинга Kubernetes. Это поможет вам управлять кластером.
• Балансировщик нагрузки, который управляет внешним доступом к вашим службам. Это будет
единственная точка входа в ваш кластер. Вы должны сохранить порты, связанные с
сервисом (IP:3000 для Grafana и т. Д.). Балансировщик нагрузки будет иметь один ip-адрес.
• Веб-сайт WordPress, прослушивающий порт 5050, который будет работать с базой данных MySQL.
Обе службы должны работать в отдельных контейнерах. На сайте WordPress будет
несколько пользователей и администратор. Wordpress нуждается в собственном сервере nginx. То
Балансировщик нагрузки должен иметь возможность перенаправлять непосредственно на эту службу.
• phpMyAdmin, прослушивающий порт 5000 и связанный с базой данных MySQL. phpMyAdmin нуждается в собственном сервере nginx. Балансировщик нагрузки должен иметь возможность перенаправлять
данные непосредственно на эту службу.
• Контейнер с сервером annginx, прослушивающим порты 80 и 443. Порт 80 будет в
http и должен быть систематическим перенаправлением типа 301 на 443, который будет в
https.
Отображаемая страница не имеет значения, если это не ошибка http.
Этот контейнер позволит получить доступ к маршруту /wordpress, который делает перенаправление 307
на IP:WPPORT.
Он также должен разрешить доступ к /phpmyadmin с обратным прокси-сервером на IP:PMAPORT.
• Сервер FTPS прослушивает порт 21.
• Платформа Grafana, прослушивающая порт 3000, связанная с базой данных InfluxDB.
Графана будет следить за всеми вашими контейнерами. Вы должны создать одну панель
мониторинга для каждой службы. InfluxDB и grafana будут находиться в двух разных контейнерах.
• В случае сбоя или остановки одного из двух контейнеров базы данных вам придется
обеспечить сохранение данных.
• Все ваши контейнеры должны быть перезапущены в случае сбоя или остановки одной из его составных
частей.
Убедитесь, что каждое перенаправление на службу выполняется с помощью балансировщика нагрузки. FTPS,
Grafana, Wordpress, phpMyAdmin и nginx должны быть "балансировщиком нагрузки". Influxdb
и MySQL должны быть "ClusterIP". Другие записи могут присутствовать, но ни одна из них
не может быть "NodePort".
Вот пример того, что вам нужно будет настроить: image-scheme;

Использование служб портов узлов, объекта контроллера входа или
команды переадресации портов kubectl запрещено.
Балансировщик нагрузки должен быть единственной точкой входа для Кластера.

Бесполезно пытаться использовать любой балансировщик нагрузки, предоставляемый облачным провайдером.
вам лучше посмотреть на MetalLB.